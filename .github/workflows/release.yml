# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*' # Push events to any matching semantic tag. For example, 1.10.1 or 2.0.0 or 3.0.0-alpha.
        # For more details, see https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest
    container: 
      image: shilga/raspberry-pi-pico-gbdk-docker:v0.4

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE" >> $GITHUB_ENV
        echo 'github.workspace = ${{ github.workspace }}'
        echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
        echo 'runner.workspace = ${{ runner.workspace }}'
        echo "RUNNER_WORKSPACE = $RUNNER_WORKSPACE"
        cmake --fresh -B $GITHUB_WORKSPACE/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TIME_PROVIDED_VERSION=${{ github.ref_name }}

    - name: Build
      # Build your program with the given configuration
      run: |
        git config --global --add safe.directory "$GITHUB_WORKSPACE"
        echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE" >> $GITHUB_ENV
        echo "GITHUB_SHA=$GITHUB_SHA" >> $GITHUB_ENV
        echo 'github.workspace = ${{ github.workspace }}'
        echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
        echo 'runner.workspace = ${{ runner.workspace }}'
        echo "RUNNER_WORKSPACE = $RUNNER_WORKSPACE"
        cmake --build $GITHUB_WORKSPACE/build --config ${{env.BUILD_TYPE}}

    - name: Package artifacts
      run: |
        cd ${{env.GITHUB_WORKSPACE}}/build
        tar cvzf rp2040-gb-cartridge-${{ github.ref_name }}.tgz *.bin *.elf *.elf.map *.hex *.uf2

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: rp2040-gameboy-cartridge-${{ github.ref_name }}
        path: |
          ${{env.GITHUB_WORKSPACE}}/build/*.tgz

  create_release:
    name: Create release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: list files
        run: ls

      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: false
          draft: true
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: "*.tgz"
